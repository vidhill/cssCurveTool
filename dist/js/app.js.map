{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/app.js","src/js/dom/create-keyframe.js","src/js/dom/setup.js","src/js/factory/calculate-y-pos-factory.js","src/js/factory/create-timepoint-factory.js","src/js/factory/keyframe-store-factory.js","src/js/helpers.js","src/js/path-calculation/create-segments.js","src/js/points-to-cubic.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Created by davidhill on 11/07/2016.\n */\n\n// import helpers from './helpers.js';\nimport init from './dom/setup.js';\nimport pointsToCubic from './points-to-cubic.js';\n\nimport keyFrameFactory from './factory/keyframe-store-factory';\nimport createTimePointFactory from './factory/create-timepoint-factory.js';\nimport calculateYPosFactory from './factory/calculate-y-pos-factory.js';\n\nimport createSegments from './path-calculation/create-segments.js';\n\nconst keyFrameStore = keyFrameFactory();\n\n\nconst docSetting = {\n    width: 800,\n    height: 500,\n    sidePad: 40,\n    bottomPad: 100,\n    bgColour: '#bada55'\n};\n\n// create holder svg element\nconst doc = Snap(docSetting.width, docSetting.height);\n\n// draw background\ndoc.rect(0, 0, docSetting.width, docSetting.height).attr({\n    fill: docSetting.bgColour\n});\n\n// create a group element to contain all elements\nconst containAll = doc.g();\nconst timeLine = init(containAll, docSetting);\n\nvar calculateXpos = function(perc){\n    return timeLine.width * perc;\n};\n\nconst createTimePoint = createTimePointFactory(containAll, timeLine);\n\nfunction addKeyFramesToTimeline(keyFrames) {\n\n    var valsArr = keyFrames.map(key => key.opacity);\n\n    var maxMin = {\n        maxVal: Math.max(...valsArr),\n        minVal: Math.min(...valsArr)\n    };\n\n    var calculateYpos = calculateYPosFactory(maxMin, timeLine.height, timeLine.yPos);\n\n    var points = keyFrames.map(keyFrame => {\n        return {\n            x: calculateXpos(keyFrame.offset),\n            y: calculateYpos(keyFrame.opacity),\n            offset: keyFrame.offset\n        };\n    });\n\n    var pointArr = points.reduce(pointsToCubic, []);\n    var bezierPath = createSegments(pointArr);\n\n\n    containAll.path(bezierPath)\n        .attr({\n            stroke: '#FF0000',\n            strokeWidth: 2,\n            fill: 'none'\n        });\n\n\n    const timePoints = pointArr.map(function(point){\n\n        let pointObj = createTimePoint(point);\n        containAll.add(pointObj.group);\n\n        return pointObj;\n\n    });\n\n        //timePoints[1].updatePoint();\n\n        // move everting over to the right\n    containAll.transform(`translate(${docSetting.sidePad} 0)`);\n\n    return timePoints;\n}\n\n\nlet myKeyFrames = [\n    { transform: 'scale(1)', opacity: 1, offset: 0 },\n    { transform: 'scale(.5)', opacity: 0, offset: .33333 },\n    { transform: 'scale(.667)', opacity: 0.5, offset: .66666 },\n    { transform: 'scale(.6)', opacity: 0, offset: 1 }\n];\n\nlet currKeyFrames = keyFrameStore.setKeyFrames(myKeyFrames);\n\naddKeyFramesToTimeline(currKeyFrames);\n","\n\nconst thumbDimensions = {\n    width: 5,\n    height: 15\n};\n\nexport default function(refContain, group, timeLine){\n    refContain.line = group.path(`M0,${timeLine.yPos},v-${timeLine.height}`)\n        .attr({\n            stroke: '#000',\n            strokeOpacity: 0.5,\n            strokeWidth: 1\n        });\n\n    refContain.thumb = group.rect(0, timeLine.yPos , thumbDimensions.width, thumbDimensions.height)\n        .transform(`translate(-${thumbDimensions.width/2} -${thumbDimensions.height/2})`);\n\n\n    refContain.labelText = group.text(0, timeLine.yPos + 30, '')\n        .attr({\n            textAnchor: 'middle'\n        });\n\n    refContain.timeText = group.text(0, timeLine.yPos + 60, '')\n        .attr({\n            textAnchor: 'middle'\n        });\n\n    refContain.pathPoint = group.circle(0, 0, 5);\n\n    return refContain;\n}\n","/**\n * Created by davidhill on 12/07/2016.\n */\n\nexport default function (snap, docSetting) {\n    var tLineSetting = {\n        width: (docSetting.width - (docSetting.sidePad * 2)),\n        height: 300,\n        yPos: docSetting.height - docSetting.bottomPad\n    };\n\n    // draw timeline\n    tLineSetting.objRef = snap.path(`M0 ${tLineSetting.yPos} h${tLineSetting.width}`)\n        .attr({\n            stroke: '#000',\n            strokeWidth: 1\n        });\n\n    return tLineSetting;\n}\n","\nexport default function (minMaxVals, maxHeightRange, zeroYPosition) {\n\n    const { maxVal, minVal } = minMaxVals;\n    const distance = maxVal - minVal;\n\n    return function(val){\n        const fractionTotal = (val + Math.abs(minVal))/distance;\n        return zeroYPosition - (maxHeightRange * fractionTotal);\n    };\n}\n","/**\n * Created by davidhill on 27/07/2016.\n */\n\nimport helpers from '../helpers.js';\nimport renderKeyFrame from '../dom/create-keyframe.js';\n\nfunction drawHandle(point, curvePoint, doc) {\n\n    let objectRef = {};\n\n    let handleColour = '#0000AA';\n    let handleSetting = {\n        stroke: handleColour,\n        strokeWidth: 1\n    };\n\n    objectRef.line = doc.line(point.x, point.y, curvePoint.x, curvePoint.y)\n        .attr(handleSetting);\n    objectRef.circle = doc.circle(curvePoint.x, curvePoint.y, 5)\n        .attr({\n            fill: handleColour\n        });\n    //.drag();\n\n    return objectRef;\n\n}\n\n\nexport default function(doc, timeLine) {\n\n    return function(point) {\n        var refContain = {\n            updatePoint(newPoint){\n                this.setLabelText( helpers.decimalToPercentage(newPoint.offset) );\n                this.setTimeText( helpers.toTimeScale(newPoint.offset, 500) );\n                this.setPathPointYPos(newPoint.y);\n            },\n            setLabelText(text){\n                this.labelText.node.textContent = text;\n            },\n            setTimeText(text){\n                this.timeText.node.textContent = text;\n            },\n            setPathPointYPos(yPos){\n                this.pathPoint.attr({cy: yPos});\n            }\n        };\n\n        var g = doc.g(); // group to hold\n\n        g.transform(`translate(${point.x} 0)`);\n\n        refContain = renderKeyFrame(refContain, g, timeLine);\n\n        refContain.updatePoint(point);\n\n        if(helpers.isObject(point.forwardCurve)){\n            refContain.forwardHandle = drawHandle(point, point.forwardCurve, doc);\n        }\n\n        if(helpers.isObject(point.backwardCurve)){\n            refContain.backHandle = drawHandle(point, point.backwardCurve, doc);\n        }\n\n        //g.drag();\n\n        refContain.group = g;\n\n        return refContain;\n    };\n\n}\n","/**\n * Created by davidhill on 02/08/2016.\n */\n\n\nexport default function () {\n    let keyFrames = [];\n\n    return {\n        setKeyFrames(keys){\n            keyFrames = keys;\n            return keyFrames;\n\n        },\n        getKeyFrames(){\n            return keyFrames;\n        },\n        addKeyFrame(key){\n            if(key.hasOwnProperty('offset')){\n                keyFrames.push(key);\n            } else {\n                throw new TypeError('Keyframes should have an offset property');\n            }\n        },\n        removeKeyFrame(index){\n            keyFrames.splice(index, 1);\n            return keyFrames;\n        },\n        updateKeyOffset(index, newOffset){\n            keyFrames[index].offset = newOffset;\n            return keyFrames[index];\n        }\n\n    };\n}\n","\nexport default {\n    isObject: function(value){\n        return value !== null && typeof value === 'object'; // courtesy of angularjs\n    },\n    decimalToPercentage: function(dec){\n        return ( dec * 100 ).toFixed(2) + '%';\n    },\n    toTimeScale: function (val, total) {\n        return (total*val).toFixed(2) + 'ms';\n    },\n    toSpacedString: function (...strings) {\n        return strings.join(' ');\n    }\n};\n","import helpers from '../helpers.js';\n\nexport const segmentMethods = {\n    cubicBezier(pointA, pointB) {\n        let controlPoint = [];\n\n        controlPoint[0] = 'M' + helpers.toSpacedString(pointA.x, pointA.y);\n        controlPoint[1] = 'C' + helpers.toSpacedString(pointA.forwardCurve.x, pointA.forwardCurve.y);\n\n        controlPoint[2] = helpers.toSpacedString(pointB.backwardCurve.x, pointB.backwardCurve.y);\n        controlPoint[3] = helpers.toSpacedString(pointB.x, pointB.y);\n\n        return controlPoint.join(' ');\n\n    }\n};\n\nexport default function(pointsArray) {\n\n    let result,\n        pathStrArr = [];\n\n    for(let i = 0, len = pointsArray.length - 1; i < len; i++ ){\n        // curve between current point and next\n        result = segmentMethods.cubicBezier(pointsArray[i], pointsArray[i+1]);\n        pathStrArr.push(result);\n    }\n\n    return pathStrArr.join(' ');\n\n}\n","\n\nexport default function (prevVal, point, ind, srcArr){\n\n    let prevPoint = srcArr[ind - 1];\n    let nextPoint = srcArr[ind + 1];\n\n    if(prevPoint !== undefined){\n        let xDiff = point.x - prevPoint.x;\n\n        // easeOut = cubic-bezier(0,0, 0.58,1)\n        point.backwardCurve = {\n            x: point.x - (xDiff * 0.58), //\n            y: point.y // 1\n        };\n\n    }\n\n    if(nextPoint !== undefined) {\n        let xDiff = nextPoint.x - point.x;\n\n        // easeIn = cubic-bezier(0.42,0, 1,1)\n        point.forwardCurve = {\n            x: point.x + ( xDiff * 0.42 ),\n            y: point.y // 0\n        };\n\n    }\n\n    prevVal.push(point);\n\n    return prevVal;\n\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}